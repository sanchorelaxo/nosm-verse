using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Net;
using System.IO;
using System.Xml.Serialization;
using System.Xml;
using System.Text;

namespace Ariadne
{
    public partial class cs_dispatch : System.Web.UI.Page
    {
        string mid = String.Empty;
        string sessID = String.Empty;
        string mnodeID = String.Empty;

        protected void Page_Load(object sender, EventArgs e)
        {
            //  The following PARAMETERS are needed to invoke this dispatcher:
            //
            //  "sessID"  <-- session id.  
            //                This is generated by OL when a new session is started.
            //
            //  "mnodeID" <-- map node id.  
            //                This is the node, withing the map (labyrinth) that SL 
            //                is requesting information about.
            //
            //  USAGE:
            //
            //  Initial call that generates a new session ID:  
            //  http://localhost/cs_dispatch.aspx?mnodeID=x
            //  NOTE: The value of "x" would be the mnodeID (integer value) of the root 
            //        node for a labyrinth.
            //
            //  Subsequent calls within a session:
            //  http://localhost/cs_dispatch.aspx?sessID=y&mnodeID=x
            //  NOTE: The value of "x" would be the mnodeID (integer value) of whatever
            //        node within the labyrinth you are navigating to.  The value of "y"
            //        (GUID value) would be the session id that was created in the initial
            //        call.

            // Build a new class for the result set.
            ariadne myAriadne = new ariadne();
            List<string> Errors = new List<string>();
            try
            {
                // Grab the QueryString parameters
                if (Request.QueryString["sessID"] != null)
                    sessID = (string)Request.QueryString["sessID"];
                if (Request.QueryString["mnodeID"] != null)
                    mnodeID = (string)Request.QueryString["mnodeID"];

                if (mnodeID == "")
                    Errors.Add("Missing MNodeID in QueryString");
                else
                {

                    // Make the call to OpenLabyrinth
                    string OLResults = String.Empty;
                    string OLAddress = System.Configuration.ConfigurationManager.AppSettings["OLURL"].ToString();
                    if (sessID == "")
                    {
                        // First call.
                        OLAddress += "mnode.asp?mode=remote&id=" + mnodeID;
                        OLResults = GetPageAsString(OLAddress);
                    }
                    else
                    {
                        // Subsequent call.
                        OLAddress += "mnode.asp?mode=remote&id=" + mnodeID + "&sessID=" + sessID;
                        OLResults = GetPageAsString(OLAddress);
                    }
                    if (OLResults.Contains("<labyrinth>"))  // it's valid XML vs. and error message
                    {
                        System.Xml.XmlDocument docOLResults = new System.Xml.XmlDocument();
                        docOLResults.LoadXml(OLResults);

                        Boolean boolUseOLMNodeLabels = Convert.ToBoolean(System.Configuration.ConfigurationManager.AppSettings["OLMNodeLabels"].ToString());

                        // Take the XML from OL and deserialize it into a class to make it easier to work with.
                        XmlNodeReader reader = new XmlNodeReader(docOLResults.DocumentElement);
                        XmlSerializer ser = new XmlSerializer(typeof(labyrinth));
                        object obj = ser.Deserialize(reader);
                        labyrinth myLabyrinth = (labyrinth)obj;

                        string strMNodeTitle = HttpUtility.UrlDecode(myLabyrinth.mnodetitle);
                        int intMNodeID = Convert.ToInt32(myLabyrinth.mnodeid);
                        dtstAriadne.MapNodeLabelDataTable dtMNodeLabel = new dtstAriadne.MapNodeLabelDataTable();
                        dtstAriadneTableAdapters.MapNodeLabelTableAdapter dtaMNodeLabel = new dtstAriadneTableAdapters.MapNodeLabelTableAdapter();

                        // Session XML Results
                        ariadneSessionAttributes mySession = new ariadneSessionAttributes();
                        if (sessID == "")
                            mySession.SessionID = myLabyrinth.mysession;
                        else
                            mySession.SessionID = sessID;
                        mySession.SessionType = "OL";
                        myAriadne.SessionInfo = mySession;

                        // Node XML Results
                        ariadneNodeAttributes myNode = new ariadneNodeAttributes();
                        myNode.NodeID = myLabyrinth.mnodeid;
                        if (boolUseOLMNodeLabels)
                            myNode.NodeLabel = strMNodeTitle;
                        else
                        {
                            dtMNodeLabel = dtaMNodeLabel.GetDataByMNodeID(intMNodeID);
                            if (dtMNodeLabel.Rows.Count > 0)
                                myNode.NodeLabel = dtMNodeLabel[0].MNodeLabel;
                            else
                            {
                                myNode.NodeLabel = "";
                                Errors.Add("Error looking up MNodeLabel for MNodeID [" + Convert.ToString(intMNodeID) + "]");
                            }
                        }
                        myAriadne.Node = myNode;

                        // Asset XML Results
                        // Add additional assets from separate database.
                        dtstAriadne.MNodeAssetsDataTable dtMNodeAssets = new dtstAriadne.MNodeAssetsDataTable();
                        dtstAriadneTableAdapters.MNodeAssetsTableAdapter dtaMNodeAssets = new Ariadne.dtstAriadneTableAdapters.MNodeAssetsTableAdapter();
                        dtMNodeAssets = dtaMNodeAssets.GetDataByMNodeID(intMNodeID);
                        ariadneAsset myAssets = new ariadneAsset();
                        ariadneAssetAttributes[] myAssetAttributes = new ariadneAssetAttributes[dtMNodeAssets.Rows.Count + 1];
                        if (dtMNodeAssets.Rows.Count > 0)
                        {
                            // Scroll through each asset row returned by the query and add it to the serialized class.
                            for (int i = 0; i < dtMNodeAssets.Rows.Count; i++)
                            {
                                ariadneAssetAttributes myAssetAttribute = new ariadneAssetAttributes();
                                myAssetAttribute.AssetName = dtMNodeAssets[i].AssetName;
                                myAssetAttribute.AssetType = dtMNodeAssets[i].AssetTypeName;
                                myAssetAttribute.AssetValue = dtMNodeAssets[i].AssetValue;
                                myAssetAttribute.TargetType = dtMNodeAssets[i].AssetTargetType;
                                myAssetAttributes[i] = myAssetAttribute;
                            }
                        }
                        // Add the VPDText Asset regardless of whether we have other assets.  This is the button on the viewer.
                        ariadneAssetAttributes myVPDTextAsset = new ariadneAssetAttributes();
                        myVPDTextAsset.AssetName = "nodenm"; ;
                        myVPDTextAsset.AssetType = "VPDText";
                        myVPDTextAsset.TargetType = "PIVOTE";
                        myVPDTextAsset.AssetValue = strMNodeTitle;
                        myAssetAttributes[dtMNodeAssets.Rows.Count] = myVPDTextAsset;

                        myAssets.AssetAttributes = myAssetAttributes;
                        myAriadne.Assets = myAssets;

                        // Link XML Results
                        // Get the MNode IDs and corresponding text from the URLs in the <linker> tag.
                        // Do some cleanup to make this easier.
                        string strLinker = HttpUtility.UrlDecode(myLabyrinth.linker);
                        strLinker = strLinker.Replace("<p>", "");
                        strLinker = strLinker.Replace("</p>", "");
                        strLinker = strLinker.Replace("<a href='mnode_client.asp", "");
                        strLinker = strLinker.Replace("</a>", "");
                        strLinker = strLinker.Replace("&mode=remote", "");

                        List<string> MNodeIDs = new List<string>();
                        List<string> MNodeTexts = new List<string>();

                        while (strLinker != "")
                        {
                            // Get the MNodeID
                            int intIDLoc = strLinker.IndexOf("?id=");
                            int intSessLoc = strLinker.IndexOf("&sessID");
                            string strMNode = strLinker.Substring(intIDLoc + 4, intSessLoc - intIDLoc - 4);
                            MNodeIDs.Add(strMNode);

                            // Get the Corresponding Text
                            strLinker = strLinker.Substring(intSessLoc, strLinker.Length - intSessLoc);
                            int intBracketLoc = strLinker.IndexOf("]]]] -");
                            strLinker = strLinker.Substring(intBracketLoc + 7, strLinker.Length - intBracketLoc - 7);
                            int intNextIDLoc = strLinker.IndexOf("?id=");
                            if (intNextIDLoc == -1)
                            {
                                if (boolUseOLMNodeLabels)
                                    MNodeTexts.Add(strLinker);
                                else
                                {
                                    intMNodeID = Convert.ToInt32(strMNode);
                                    dtMNodeLabel = dtaMNodeLabel.GetDataByMNodeID(intMNodeID);
                                    if (dtMNodeLabel.Rows.Count > 0)
                                        MNodeTexts.Add(dtMNodeLabel[0].MNodeLabel);
                                    else
                                    {
                                        MNodeTexts.Add("");
                                        Errors.Add("Error looking up MNodeLabel for MNodeID [" + Convert.ToString(intMNodeID) + "]");
                                    }
                                }
                                strLinker = "";
                            }
                            else
                            {
                                string strMNodeText = strLinker.Substring(0, intNextIDLoc);
                                if (boolUseOLMNodeLabels)
                                    MNodeTexts.Add(strMNodeText);
                                else
                                {
                                    intMNodeID = Convert.ToInt32(strMNode);
                                    dtMNodeLabel = dtaMNodeLabel.GetDataByMNodeID(intMNodeID);
                                    if (dtMNodeLabel.Rows.Count > 0)
                                        MNodeTexts.Add(dtMNodeLabel[0].MNodeLabel);
                                    else
                                    {
                                        MNodeTexts.Add("");
                                        Errors.Add("Error looking up MNodeLabel for MNodeID [" + Convert.ToString(intMNodeID) + "]");
                                    }
                                }
                                strLinker = strLinker.Substring(intNextIDLoc, strLinker.Length - intNextIDLoc);
                            }
                        }

                        if (MNodeIDs.Count > 0)
                        {
                            ariadneLink myLinks = new ariadneLink();
                            ariadneLinkAttributes[] myLinkAttributes = new ariadneLinkAttributes[MNodeIDs.Count];

                            // Scroll through each of the MNodes found in the ol.linker and add them to the serialized class.
                            for (int j = 0; j < MNodeIDs.Count; j++)
                            {
                                ariadneLinkAttributes myLinkAttribute = new ariadneLinkAttributes();
                                myLinkAttribute.LinkLabel = MNodeTexts[j];
                                myLinkAttribute.LinkReference = MNodeIDs[j];
                                myLinkAttributes[j] = myLinkAttribute;
                            }
                            myLinks.LinkAttributes = myLinkAttributes;
                            myAriadne.Links = myLinks;
                        }
                    }
                    else
                    {
                        Errors.Add("Bad Call to OL [" + OLAddress + "] [" + OLResults + "]");
                    }
                }
            }
            catch (Exception Ex)
            {
                Errors.Add("General Error Trapping [" + Ex.Message + "]");
            }
            finally
            {
                // Add the Errors to the output if there are any.
                if (Errors.Count > 0)
                {
                    ariadneError myErrors = new ariadneError();
                    ariadneErrorAttributes[] myErrorAttributes = new ariadneErrorAttributes[Errors.Count];

                    for (int k = 0; k < Errors.Count; k++)
                    {
                        ariadneErrorAttributes myErrorAttribute = new ariadneErrorAttributes();
                        myErrorAttribute.ErrorMessage = Errors[k];
                        myErrorAttributes[k] = myErrorAttribute;
                    }
                    myErrors.ErrorAttributes = myErrorAttributes;
                    myAriadne.Errors = myErrors;
                }

                // Serialize the XML output to the httpresponse.
                String XmlizedString = null;
                MemoryStream memoryStream = new MemoryStream();
                XmlSerializer xs = new XmlSerializer(typeof(ariadne));
                XmlTextWriter xmlTextWriter = new XmlTextWriter(memoryStream, Encoding.UTF8);

                xs.Serialize(xmlTextWriter, myAriadne);
                memoryStream = (MemoryStream)xmlTextWriter.BaseStream;
                XmlizedString = UTF8ByteArrayToString(memoryStream.ToArray());

                Response.ContentType = "text/xml";
                Response.Write(XmlizedString);
            }
        }

        public static string GetPageAsString(string address)
        {
            string result = "";

            try
            {
                // Create the web request   
                HttpWebRequest request = WebRequest.Create(address) as HttpWebRequest;

                // Get response   
                using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                {
                    // Get the response stream   
                    StreamReader reader = new StreamReader(response.GetResponseStream());

                    // Read the whole contents and return as a string   
                    result = reader.ReadToEnd();
                }
            }
            catch (Exception ex)
            {
                result = ex.Message;
            }
            return result;
        }

        private String UTF8ByteArrayToString(Byte[] characters)
        {

            UTF8Encoding encoding = new UTF8Encoding();

            String constructedString = encoding.GetString(characters);

            return (constructedString);

        }

    }
}
